// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponse, error)
	AssetAdd(ctx context.Context, in *AssetAddRequest, opts ...grpc.CallOption) (*Empty, error)
	AssetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AssetListResponse, error)
	AssetItemList(ctx context.Context, in *AssetItemListRequest, opts ...grpc.CallOption) (*AssetItemListResponse, error)
	FileAdd(ctx context.Context, in *FileAddRequest, opts ...grpc.CallOption) (*Empty, error)
	FileBackend(ctx context.Context, in *FileAddRequest, opts ...grpc.CallOption) (*Empty, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/Backend/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AssetAdd(ctx context.Context, in *AssetAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Backend/AssetAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AssetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AssetListResponse, error) {
	out := new(AssetListResponse)
	err := c.cc.Invoke(ctx, "/Backend/AssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AssetItemList(ctx context.Context, in *AssetItemListRequest, opts ...grpc.CallOption) (*AssetItemListResponse, error) {
	out := new(AssetItemListResponse)
	err := c.cc.Invoke(ctx, "/Backend/AssetItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) FileAdd(ctx context.Context, in *FileAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Backend/FileAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) FileBackend(ctx context.Context, in *FileAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Backend/FileBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations should embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	Hello(context.Context, *Empty) (*HelloResponse, error)
	AssetAdd(context.Context, *AssetAddRequest) (*Empty, error)
	AssetList(context.Context, *Empty) (*AssetListResponse, error)
	AssetItemList(context.Context, *AssetItemListRequest) (*AssetItemListResponse, error)
	FileAdd(context.Context, *FileAddRequest) (*Empty, error)
	FileBackend(context.Context, *FileAddRequest) (*Empty, error)
}

// UnimplementedBackendServer should be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) Hello(context.Context, *Empty) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedBackendServer) AssetAdd(context.Context, *AssetAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetAdd not implemented")
}
func (UnimplementedBackendServer) AssetList(context.Context, *Empty) (*AssetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetList not implemented")
}
func (UnimplementedBackendServer) AssetItemList(context.Context, *AssetItemListRequest) (*AssetItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetItemList not implemented")
}
func (UnimplementedBackendServer) FileAdd(context.Context, *FileAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileAdd not implemented")
}
func (UnimplementedBackendServer) FileBackend(context.Context, *FileAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileBackend not implemented")
}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AssetAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AssetAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/AssetAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AssetAdd(ctx, req.(*AssetAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/AssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AssetList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AssetItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AssetItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/AssetItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AssetItemList(ctx, req.(*AssetItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_FileAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).FileAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/FileAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).FileAdd(ctx, req.(*FileAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_FileBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).FileBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/FileBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).FileBackend(ctx, req.(*FileAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Backend_Hello_Handler,
		},
		{
			MethodName: "AssetAdd",
			Handler:    _Backend_AssetAdd_Handler,
		},
		{
			MethodName: "AssetList",
			Handler:    _Backend_AssetList_Handler,
		},
		{
			MethodName: "AssetItemList",
			Handler:    _Backend_AssetItemList_Handler,
		},
		{
			MethodName: "FileAdd",
			Handler:    _Backend_FileAdd_Handler,
		},
		{
			MethodName: "FileBackend",
			Handler:    _Backend_FileBackend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
